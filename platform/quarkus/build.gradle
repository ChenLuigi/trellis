plugins {
    id 'io.quarkus' version "0.28.1"
}

def installForQuarkus = [
    "trellis-api",
    "trellis-app",
    "trellis-audit",
    "trellis-auth-oauth",
    "trellis-cache",
    "trellis-cdi",
    "trellis-constraint-rules",
    "trellis-event-jsonb",
    "trellis-file",
    "trellis-http",
    "trellis-io-jena",
    "trellis-namespaces",
    "trellis-rdfa",
    "trellis-reactive",
    "trellis-triplestore",
    "trellis-vocabulary",
    "trellis-webac"
]

dependencies {
    implementation enforcedPlatform("io.quarkus:quarkus-bom:$quarkusVersion")

    implementation "org.trellisldp:trellis-api:${project.version}"
    implementation "org.trellisldp:trellis-app:${project.version}"
    implementation "org.trellisldp:trellis-audit:${project.version}"
    implementation "org.trellisldp:trellis-auth-oauth:${project.version}"
    implementation "org.trellisldp:trellis-cache:${project.version}"
    implementation "org.trellisldp:trellis-cdi:${project.version}"
    implementation "org.trellisldp:trellis-constraint-rules:${project.version}"
    implementation "org.trellisldp:trellis-event-jsonb:${project.version}"
    implementation "org.trellisldp:trellis-file:${project.version}"
    implementation "org.trellisldp:trellis-http:${project.version}"
    implementation "org.trellisldp:trellis-io-jena:${project.version}"
    implementation "org.trellisldp:trellis-namespaces:${project.version}"
    implementation "org.trellisldp:trellis-rdfa:${project.version}"
    implementation "org.trellisldp:trellis-reactive:${project.version}"
    implementation "org.trellisldp:trellis-triplestore:${project.version}"
    implementation "org.trellisldp:trellis-vocabulary:${project.version}"
    implementation "org.trellisldp:trellis-webac:${project.version}"

    implementation 'io.quarkus:quarkus-jsonb'
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-security'
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.quarkus:quarkus-smallrye-reactive-messaging'

    implementation "com.github.spullara.mustache.java:compiler:$mustacheVersion"
    implementation "com.google.guava:guava:$guavaVersion"

    runtime "javax.activation:javax.activation-api:$activationApiVersion"
    runtime "javax.xml.bind:jaxb-api:$jaxbVersion"

    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.rest-assured:rest-assured"
}

test {
    systemProperty 'com.arjuna.ats.arjuna.objectstore.objectStoreDir', "$buildDir/data/ObjectStore"
    systemProperty 'trellis.file.binary.basepath', "$buildDir/data/binaries"
    systemProperty 'trellis.file.memento.basepath', "$buildDir/data/mementos"
    systemProperty 'trellis.namespaces.path', "$buildDir/resources/test/namespaces.json"
}

sonarqube {
    skipProject = true
}

// This requires Graal-VM to be installed
buildNative.enabled = project.hasProperty("hasGraalVm")

rootProject.childProjects.each { n, p ->
    if (installForQuarkus.contains(p.name)) {
        tasks.compileJava.dependsOn p.tasks.install
    }
}

java {
    // because this isn't built as a JPMS module
    if (project.hasProperty("jpms") && JavaVersion.current().isJava11Compatible()) {
        disableAutoTargetJvm()
    }
}
