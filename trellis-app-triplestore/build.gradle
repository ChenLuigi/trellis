apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'application'
apply plugin: 'nebula.ospackage-application'

description = 'Trellis Triplestore Application'
mainClassName = 'org.trellisldp.app.triplestore.TrellisApplication'
applicationName = 'trellis'

dependencies {
    compile("com.github.jsonld-java:jsonld-java:$jsonldVersion")
    compile("commons-codec:commons-codec:$commonsCodecVersion")
    compile("io.dropwizard:dropwizard-auth:$dropwizardVersion")
    compile("io.dropwizard:dropwizard-core:$dropwizardVersion")
    compile("io.dropwizard:dropwizard-metrics:$dropwizardVersion")
    compile("io.dropwizard:dropwizard-http2:$dropwizardVersion")
    compile("io.jsonwebtoken:jjwt:$jwtVersion")
    compile("javax.activation:javax.activation-api:$activationApiVersion")
    compile("javax.jms:javax.jms-api:$jmsApiVersion")
    compile("org.apache.commons:commons-rdf-jena:$commonsRdfVersion")
    //TODO resolve activemq and jena-osgi for JPMS
    compile("org.apache.activemq:activemq-client:$activeMqVersion")
    compile("org.apache.jena:jena-osgi:$jenaVersion")
    compile("org.apache.jena:jena-tdb2:$jenaVersion")
    compile("org.slf4j:slf4j-api:$slf4jVersion")

    compile project(':trellis-constraint-rules')
    compile project(':trellis-io-jena')
    compile project(':trellis-id')
    compile project(':trellis-api')
    compile project(':trellis-http')
    compile project(':trellis-vocabulary')
    compile project(':trellis-file')
    compile project(':trellis-namespaces')
    compile project(':trellis-agent')
    compile project(':trellis-audit')
    compile project(':trellis-event-serialization')
    compile project(':trellis-webac')
    compile project(':trellis-triplestore')
    compile project(':trellis-jms')
    compile project(':trellis-kafka')
    compile project(':trellis-app')

    runtime ("javax.xml.bind:jaxb-api:$jaxbVersion")

    testCompile("io.dropwizard:dropwizard-client:$dropwizardVersion")
    testCompile("io.dropwizard:dropwizard-testing:$dropwizardVersion")
    testCompile("org.apache.activemq:activemq-broker:$activeMqVersion")
    testCompile("org.apache.tamaya:tamaya-core:$tamayaVersion")
    testCompile("org.awaitility:awaitility:$awaitilityVersion")
    testCompile("ch.qos.logback:logback-classic:$logbackVersion")
    testCompile("org.mockito:mockito-core:$mockitoVersion")
    testCompile project(':trellis-test')
}

ospackage {
    packageName = 'trellis'
    release = '1'
    os = LINUX
    license = 'ASL 2.0'
    url = 'https://www.trellisldp.org'
    summary = 'Trellis is a linked data server.'
    packageDescription = '''\
Trellis is a linked data server that can be used for storing large volumes of content,
particularly in cases where that content is stored for years and decades.'''

    user = 'trellis'
    // Note: the linux installers do not depend on Java because it is too complicated to
    // reliably navigate this dependency across linux distributions and supported JRE versions.
    requires('systemd')
    into '/opt/trellis'

    from ('scripts') {
        into 'bin'
        fileMode = 0550
    }

    from ('jar.outputs.files') {
        into 'lib'
    }

    from ('src/dist/etc') {
        fileType CONFIG | NOREPLACE
        into '/opt/trellis/etc'
    }

    from ('src/dist/data') {
        fileType CONFIG | NOREPLACE
        into '/opt/trellis/data'
    }
}

buildRpm {
    preInstall file('src/rpm/preInstall.sh')
    postInstall file('src/rpm/postInstall.sh')
    preUninstall file('src/rpm/preUninstall.sh')
}

buildDeb {
    preInstall file('src/deb/preInstall.sh')
    postInstall file('src/deb/postInstall.sh')
    preUninstall file('src/deb/preUninstall.sh')
}

signing {
    required { !version.endsWith("SNAPSHOT") }
    sign buildRpm
    sign buildDeb
    sign distTar
    sign distZip
}

install {
    enabled = false
}

uploadArchives {
    // There is no need to store these artifacts on maven central
    enabled = false
}

task copyDistTask(type: Copy) {
    from '../LICENSE'
    from 'README.md'
    into 'src/dist'
}

assembleDist.dependsOn copyDistTask

