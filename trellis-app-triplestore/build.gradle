apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'application'
apply plugin: 'nebula.ospackage-application'

description = 'Trellis Triplestore Application'
mainClassName = 'org.trellisldp.app.triplestore.TrellisApplication'
applicationName = 'trellis'

dependencies {
    compile group: 'commons-codec', name: 'commons-codec', version: commonsCodecVersion
    compile group: 'javax.activation', name: 'javax.activation-api', version: activationApiVersion
    compile group: 'javax.jms', name: 'javax.jms-api', version: jmsApiVersion
    compile group: 'io.dropwizard', name: 'dropwizard-auth', version: dropwizardVersion
    compile group: 'io.dropwizard', name: 'dropwizard-core', version: dropwizardVersion
    compile group: 'io.dropwizard', name: 'dropwizard-metrics', version: dropwizardVersion
    compile group: 'io.dropwizard', name: 'dropwizard-http2', version: dropwizardVersion
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: jwtVersion
    compile group: 'org.apache.activemq', name: 'activemq-client', version: activeMqVersion
    compile group: 'org.apache.commons', name: 'commons-rdf-jena', version: commonsRdfVersion
    compile group: 'org.apache.jena', name: 'jena-osgi', version: jenaVersion
    compile group: 'org.apache.jena', name: 'jena-tdb2', version: jenaVersion
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion

    compile project(':trellis-constraint-rules')
    compile project(':trellis-io-jena')
    compile project(':trellis-id')
    compile project(':trellis-api')
    compile project(':trellis-http')
    compile project(':trellis-vocabulary')
    compile project(':trellis-file')
    compile project(':trellis-namespaces')
    compile project(':trellis-agent')
    compile project(':trellis-audit')
    compile project(':trellis-event-serialization')
    compile project(':trellis-webac')
    compile project(':trellis-triplestore')
    compile project(':trellis-jms')
    compile project(':trellis-kafka')
    compile project(':trellis-app')

    runtime group: 'javax.xml.bind', name: 'jaxb-api', version: jaxbVersion

    testCompile group: 'io.dropwizard', name: 'dropwizard-client', version: dropwizardVersion
    testCompile group: 'io.dropwizard', name: 'dropwizard-testing', version: dropwizardVersion
    testCompile group: 'org.apache.activemq', name: 'activemq-broker', version: activeMqVersion
    testCompile group: 'org.apiguardian', name: 'apiguardian-api', version: apiguardianVersion
    testCompile group: 'org.apache.tamaya', name: 'tamaya-core', version: tamayaVersion
    testCompile group: 'org.awaitility', name: 'awaitility', version: awaitilityVersion
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testCompile project(':trellis-test')
}

ospackage {
    packageName = 'trellis'
    release = '1'
    os = LINUX
    license = 'ASL 2.0'
    url = 'https://www.trellisldp.org'
    summary = 'Trellis is a linked data server.'
    packageDescription = '''\
Trellis is a linked data server that can be used for storing large volumes of content,
particularly in cases where that content is stored for years and decades.'''

    user = 'trellis'
    // Note: the linux installers do not depend on Java because it is too complicated to
    // reliably navigate this dependency across linux distributions and supported JRE versions.
    requires('systemd')
    into '/opt/trellis'

    from ('scripts') {
        into 'bin'
        fileMode = 0550
    }

    from ('jar.outputs.files') {
        into 'lib'
    }

    from ('src/dist/etc') {
        fileType CONFIG | NOREPLACE
        into '/opt/trellis/etc'
    }

    from ('src/dist/data') {
        fileType CONFIG | NOREPLACE
        into '/opt/trellis/data'
    }
}

buildRpm {
    preInstall file('src/rpm/preInstall.sh')
    postInstall file('src/rpm/postInstall.sh')
    preUninstall file('src/rpm/preUninstall.sh')
}

buildDeb {
    preInstall file('src/deb/preInstall.sh')
    postInstall file('src/deb/postInstall.sh')
    preUninstall file('src/deb/preUninstall.sh')
}

signing {
    required { !version.endsWith("SNAPSHOT") }
    sign buildRpm
    sign buildDeb
    sign distTar
    sign distZip
}

install {
    enabled = false
}

uploadArchives {
    // There is no need to store these artifacts on maven central
    enabled = false
}

task copyDistTask(type: Copy) {
    from '../LICENSE'
    from 'README.md'
    into 'src/dist'
}

assembleDist.dependsOn copyDistTask

